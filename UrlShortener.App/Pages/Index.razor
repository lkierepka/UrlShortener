@page "/"

<PageTitle>Url shortener</PageTitle>

@using UrlShortener.App.Data
@using UrlShortener.Models
@inject UrlShortenerService UrlShortenerService
@inject NavigationManager NavigationManager
<PageTitle>Index</PageTitle>

<h1>Url shortener</h1>

Enter url to shorten
<EditForm Model="@_newShortLinkModel" OnValidSubmit="@ShortenUrl">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <InputText id="name" @bind-Value="_newShortLinkModel.Url"/>

    <button type="submit">Shorten</button>
</EditForm>

@if (_shortLink != null)
{
    <div>Here is your short url: </div>
    <code>@FormatUrl(_shortLink?.Identifier)</code>
}

@if (_links == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Short url</th>
            <th>Long url</th>
            <th>Created date</th>
            <th>Usage count</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var link in _links)
        {
            <tr>
                <td>
                    <a href=@FormatUrl(link.Identifier)>@FormatUrl(link.Identifier)</a>
                </td>
                <td>
                    <a href=@link.LongUrl>@link.LongUrl</a>
                </td>
                <td>@link.Timestamp</td>
                <td>@link.UsageCount</td>
                <td>
                    <button onclick=@Delete(link.Identifier)>Delete</button>
                </td>
                <td></td>
            </tr>
        }
        </tbody>
    </table>
}


@code {
    private NewShortLinkModel _newShortLinkModel = new();
    private ShortLink? _shortLink;

    private List<ShortLink>? _links;

    protected override async void OnInitialized()
    {
        await LoadLinks();
    }

    private async void ShortenUrl()
    {
        _shortLink = await UrlShortenerService.ShortenLink(new ShortenLinkRequest { Url = _newShortLinkModel.Url! });
        _newShortLinkModel = new NewShortLinkModel();
        await LoadLinks();
    }

    private async Task LoadLinks()
    {
        _links = await UrlShortenerService.GetShortLinks();
        StateHasChanged();
    }

    private string FormatUrl(string? identifier)
    {
        return identifier == null ? string.Empty : NavigationManager.ToAbsoluteUri(identifier).ToString();
    }

    private Action Delete(string linkIdentifier)
    {
        return async () =>
        {
    // Some message about the deletion?
            await UrlShortenerService.DeleteLink(linkIdentifier);
            await LoadLinks();
        };
    }

}